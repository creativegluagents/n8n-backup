{"createdAt":"2025-06-26T07:46:22.120Z","updatedAt":"2025-07-30T08:19:01.477Z","id":"BUb54Ltl3C6X8RtN","name":"Shreyansh MAin workflow getter","active":false,"isArchived":false,"nodes":[{"parameters":{"jsCode":"// Enhanced Code Node to extract sub-workflow IDs from main workflow data\n// This handles both Execute Workflow nodes and AI Agent Tool Workflow connections\nconst workflowData = $('Get a workflow').first().json;\nconst subWorkflowIds = [];\nconst subWorkflowInfo = [];\nconst connectionTypes = {\n  executeWorkflow: 0,\n  aiAgentTools: 0,\n  aiAgentDirect: 0\n};\n\n// Check if nodes exist in the workflow data\nif (workflowData && workflowData.nodes) {\n  // Loop through all nodes to find different types of workflow connections\n  workflowData.nodes.forEach(node => {\n    \n    // 1. Check for Execute Workflow nodes (original logic)\n    if (node.type === 'n8n-nodes-base.executeWorkflow') {\n      let workflowId = null;\n      let workflowName = null;\n      \n      if (node.parameters && node.parameters.workflowId) {\n        if (typeof node.parameters.workflowId === 'string') {\n          workflowId = node.parameters.workflowId;\n        } else if (node.parameters.workflowId.value) {\n          workflowId = node.parameters.workflowId.value;\n          workflowName = node.parameters.workflowId.cachedResultName || null;\n        }\n      }\n      \n      if (workflowId) {\n        subWorkflowIds.push(workflowId);\n        subWorkflowInfo.push({\n          id: workflowId,\n          name: workflowName || `Execute Workflow ${subWorkflowIds.length}`,\n          nodeId: node.id,\n          nodeName: node.name,\n          connectionType: 'executeWorkflow',\n          nodeType: node.type\n        });\n        connectionTypes.executeWorkflow++;\n      }\n    }\n    \n    // 2. Check for AI Agent Tool Workflow nodes (NEW)\n    else if (node.type === '@n8n/n8n-nodes-langchain.toolWorkflow') {\n      let workflowId = null;\n      let workflowName = null;\n      \n      if (node.parameters && node.parameters.workflowId) {\n        if (typeof node.parameters.workflowId === 'string') {\n          workflowId = node.parameters.workflowId;\n        } else if (node.parameters.workflowId.value) {\n          workflowId = node.parameters.workflowId.value;\n          workflowName = node.parameters.workflowId.cachedResultName || null;\n        }\n      }\n      \n      if (workflowId) {\n        subWorkflowIds.push(workflowId);\n        subWorkflowInfo.push({\n          id: workflowId,\n          name: workflowName || `AI Tool Workflow ${subWorkflowIds.length}`,\n          nodeId: node.id,\n          nodeName: node.name,\n          connectionType: 'aiAgentTools',\n          nodeType: node.type,\n          description: node.parameters.description || null\n        });\n        connectionTypes.aiAgentTools++;\n      }\n    }\n    \n    // 3. Check for other AI Agent nodes that might have direct workflow connections (FUTURE-PROOF)\n    else if (node.type && node.type.includes('langchain') && node.type.includes('agent')) {\n      // Check if this AI agent node has any workflow references in its parameters\n      if (node.parameters) {\n        // Look for any parameter that might contain workflow references\n        Object.keys(node.parameters).forEach(paramKey => {\n          const param = node.parameters[paramKey];\n          \n          // Check if this parameter looks like a workflow reference\n          if (param && typeof param === 'object' && param.value && \n              (paramKey.toLowerCase().includes('workflow') || \n               (typeof param.value === 'string' && param.value.length > 10))) {\n            \n            const workflowId = param.value;\n            const workflowName = param.cachedResultName || null;\n            \n            // Avoid duplicates\n            if (!subWorkflowIds.includes(workflowId)) {\n              subWorkflowIds.push(workflowId);\n              subWorkflowInfo.push({\n                id: workflowId,\n                name: workflowName || `AI Agent Direct ${subWorkflowIds.length}`,\n                nodeId: node.id,\n                nodeName: node.name,\n                connectionType: 'aiAgentDirect',\n                nodeType: node.type,\n                parameterKey: paramKey\n              });\n              connectionTypes.aiAgentDirect++;\n            }\n          }\n        });\n      }\n    }\n  });\n}\n\n// Remove duplicates (in case a workflow is referenced multiple times)\nconst uniqueSubWorkflowIds = [...new Set(subWorkflowIds)];\nconst uniqueSubWorkflowInfo = subWorkflowInfo.filter((item, index, self) => \n  index === self.findIndex(t => t.id === item.id)\n);\n\n// Return the enhanced results\nreturn {\n  mainWorkflowId: workflowData.id,\n  mainWorkflowName: workflowData.name,\n  subWorkflowIds: uniqueSubWorkflowIds,\n  subWorkflowInfo: uniqueSubWorkflowInfo,\n  totalSubWorkflows: uniqueSubWorkflowIds.length,\n  connectionTypes: connectionTypes,\n  originalWorkflowData: workflowData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[80,-224],"id":"2d72ceca-bb29-4a80-9fe8-158520f6a8a8","name":"Code"},{"parameters":{"fieldToSplitOut":"subWorkflowIds","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[304,-224],"id":"ed7f945b-e0e3-4eff-803a-d961e68d4f52","name":"Split Out","alwaysOutputData":true,"onError":"continueRegularOutput"},{"parameters":{"workflowId":{"__rl":true,"value":"VKFPsJBjcOrURLUP","mode":"list","cachedResultName":"Shreyansh Main data- maker Newest"},"workflowInputs":{"mappingMode":"defineBelow","value":{"id":"={{ $('When Executed by Another Workflow').item.json.MainWorkflowID }}","link":"={{ $('When Executed by Another Workflow').item.json.WorkflowLink }}","image":"={{ $('When Executed by Another Workflow').item.json.ImageLink }}","description":"={{ $('When Executed by Another Workflow').item.json.AgentDescrition }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"link","displayName":"link","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"image","displayName":"image","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"description","displayName":"description","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-144,-224],"id":"a514514a-a75a-42a8-91a2-1ea037c40a44","name":"Execute Workflow1"},{"parameters":{"operation":"get","workflowId":{"__rl":true,"value":"={{ $json.MainWorkflowID }}","mode":"id"},"requestOptions":{}},"type":"n8n-nodes-base.n8n","typeVersion":1,"position":[-368,-224],"id":"0c957b2e-5929-4760-9776-68b046095612","name":"Get a workflow","credentials":{"n8nApi":{"id":"9KyJX7wsWnhRZEI0","name":"New n8n API"}}},{"parameters":{"workflowInputs":{"values":[{"name":"MainWorkflowID"},{"name":"WorkflowLink"},{"name":"ImageLink"},{"name":"AgentDescrition"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-576,-224],"id":"4a2fb5f4-6bb0-4730-8465-bb11a07b168f","name":"When Executed by Another Workflow"},{"parameters":{"workflowId":{"__rl":true,"value":"YEEdQ92uxVzhdXON","mode":"list","cachedResultName":"Shreyansh Sub Workflow maker"},"workflowInputs":{"mappingMode":"defineBelow","value":{"SubWorkFlowID":"={{ $json.subWorkflowIds }}","MAinWorkflowExecutionDATA":"={{ $('Execute Workflow1').item.json.toJsonString() }}","MainWorkflowName":"={{ $('Get a workflow').item.json.name }}"},"matchingColumns":["SubWorkFlowID"],"schema":[{"id":"SubWorkFlowID","displayName":"SubWorkFlowID","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"MAinWorkflowExecutionDATA","displayName":"MAinWorkflowExecutionDATA","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"MainWorkflowName","displayName":"MainWorkflowName","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[528,-224],"id":"acfddfa0-540c-4349-96e7-98101b5e1654","name":"Execute Workflow","onError":"continueRegularOutput"},{"parameters":{"promptType":"define","text":"={{ $json }}","options":{"systemMessage":"=🟡 Role:\nYou are an AI Agent specialized in Airtable operations. Your task is to create or update workflow records in Airtable based on structured JSON input. You must strictly follow formatting rules, store execution data correctly, and protect specific fields during updates.\n\n🟢 Instruction:\nUse the Airtable tool to create or update records for both Main Workflows and Subworkflows using the input:\n{{ $json.toJsonString() }}.\n\nBefore performing Airtable actions:\n\nFirst, process the input using the Structure Output Parser Tool.\n\nThen, extract and validate all provided ExecutionData (for main and subworkflows).\n\nEnsure execution data is saved in the ExecutionData column of Airtable as a valid JSON.stringify() string.\n\nStrictly follow formatting rules for child workflow references and do not update protected fields like Agent Description.\n\n🔵 Steps:\n\nEnsure MainWorkflowName, MainWorkflowExecutionDATA, and the SubWorkflows[] array (with name, id, and ExecutionData) are correctly extracted.\n\nProcess Main Workflow:\n\nCreate or update the Airtable record for the main workflow:\n\nUse MainWorkflowName as identifier.\n\nSave the MainWorkflowExecutionDATA field:\n\nParse it into JSON to validate structure.\n\nThen use JSON.stringify() to store it in the ExecutionData column.\n\nIf subworkflows exist:\n\nExtract their name values.\n\nBuild a valid child array string like:\n[\"Subflow 1\", \"Subflow 2\"]\nusing JSON.stringify().\n\nSave this to the Childs column.\n\nIMPORTANT: If updating, do not modify the Agent Description field.\n\nLog all actions and Airtable responses.\n\nProcess Subworkflows:\n\nFor each subworkflow in SubWorkflows[]:\n\nCreate a separate Airtable record.\n\nUse the name and id fields to identify the record.\n\nExtract and validate ExecutionData:\nSave it in the \nTotal executions\nSuccesful finished number\nUnsuccesful finished number\nSuccess percentage\nFailure percentage column.\nAgent Description column(If value is available then fill it out else keep it empty).\nWorkflow id column.\nWorkflow link column(If value is available then fill it out else keep it empty).\nImage link column(If value is available then fill it out else keep it empty).\nEffective Intelligence(Don't change this value while updating we should retain its existing value).\n\nDo not nest subworkflows inside each other.\n\nEnsure names are clean and precisely formatted.\n\nLog all Airtable actions and results.\n\nValidate Childs Format:\n\nUse only clean, stringified arrays using JSON.stringify():\n\n✅ Correct: [\"Logan2.0 (shipping)\", \"Ashish LOGAN Inventory\"]\n\n❌ Incorrect: brackets/quotes errors, extra characters, trailing spaces, inconsistent naming.\n\nLog validation results and any rejected formats.\n\nExecute Airtable Actions:\n\nPerform Airtable create or update operations with all validated fields:\n\nAgent Name\nChilds\nTotal executions\nSuccesful finished number\nUnsuccesful finished number\nSuccess percentage\nFailure percentage\nAgent Description column(If value is available then fill it out else keep it empty).\nWorkflow id column.\nWorkflow link column(If value is available then fill it out else keep it empty).\nImage link column(If value is available then fill it out else keep it empty).\nEffective Intelligence(Don't change this value while updating we should retain its existing value).\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[752,-224],"id":"425fb597-89de-4f0e-8c38-f6d6fc8cadba","name":"AI Agent"},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4.1-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[672,32],"id":"39ab4e03-dd3d-4ed5-846a-b0f83dde8249","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"zD5wfo9phRcLkpGK","name":"OpenAi account 2"}}},{"parameters":{"operation":"upsert","base":{"__rl":true,"value":"applNt2PLXRvWGeoF","mode":"list","cachedResultName":"Agents","cachedResultUrl":"https://airtable.com/applNt2PLXRvWGeoF"},"table":{"__rl":true,"value":"tblcHZxjHzUPdYcPW","mode":"list","cachedResultName":"Table 1","cachedResultUrl":"https://airtable.com/applNt2PLXRvWGeoF/tblcHZxjHzUPdYcPW"},"columns":{"mappingMode":"defineBelow","value":{"Total executions":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Total_executions', ``, 'number') }}","Succesful finished number":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Succesful_finished_number', ``, 'number') }}","Unsuccesful finished number":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Unsuccesful_finished_number', ``, 'number') }}","Success percentage":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Success_percentage', ``, 'number') }}","Failure percentage":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Failure_percentage', ``, 'number') }}","Agent Name":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Agent_Name', ``, 'string') }}","Agent Description":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Agent_Description', ``, 'string') }}","Childs":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Childs', ``, 'string') }}","Workflow id":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Workflow_id', ``, 'string') }}","Workflow link":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Workflow_link', ``, 'string') }}","Image link":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Image_link', ``, 'string') }}","Effective Intelligence":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Effective_Intelligence', ``, 'string') }}"},"matchingColumns":["Agent Name"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":true},{"id":"Agent Name","displayName":"Agent Name","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Total executions","displayName":"Total executions","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Succesful finished number","displayName":"Succesful finished number","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Unsuccesful finished number","displayName":"Unsuccesful finished number","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Success percentage","displayName":"Success percentage","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Failure percentage","displayName":"Failure percentage","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Agent Description","displayName":"Agent Description","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Childs","displayName":"Childs","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Workflow id","displayName":"Workflow id","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Workflow link","displayName":"Workflow link","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Image link","displayName":"Image link","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Effective Intelligence","displayName":"Effective Intelligence","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtableTool","typeVersion":2.1,"position":[1072,0],"id":"23dd74a5-f936-49a8-a7ed-738e469eaa8c","name":"Create or update a record in Airtable","credentials":{"airtableTokenApi":{"id":"bDVfyeKNIcs0NKE7","name":"Gluagents Airtable"}}}],"connections":{"Code":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Execute Workflow1":{"main":[[{"node":"Code","type":"main","index":0}]]},"Get a workflow":{"main":[[{"node":"Execute Workflow1","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Get a workflow","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Execute Workflow","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Execute Workflow":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Create or update a record in Airtable":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"5f2f4f53-366f-44b1-b7da-99af335fb692","triggerCount":0,"tags":[]}