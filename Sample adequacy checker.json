{"createdAt":"2025-07-30T13:34:29.503Z","updatedAt":"2025-07-31T12:34:56.925Z","id":"E6CfMaZ66qZvypvI","name":"Sample adequacy checker","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"text"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[0,36],"id":"cd7e7f54-a55f-4788-a73a-1a3633b6a8d1","name":"When Executed by Another Workflow"},{"parameters":{"promptType":"define","text":"={{ $json.text }}","options":{"systemMessage":"=You are an environmental compliance assistant.\n\nYour task:\nGiven the text of a waste classification report, extract only those stockpiles, domains, or waste areas that have actual samples collected and reported (i.e., those that are treated as a distinct entity for EPA compliance).\n\nInstructions:\n\nFor each sampling domain/stockpile/area:\n\nExtract the domain name/label (e.g., “Stockpile 7 (SP-7)”).\n\nExtract its volume in cubic meters (m³) as a number.\n\nExtract the number of samples collected as a number.\n\nOnly include a domain if samples were actually taken for it, or it is clearly treated as a distinct sampling entity for EPA reporting.\n\nIgnore any “sections” or “sub-areas” that are just parts of a larger merged stockpile, unless the report explicitly provides separate sample data for them.\n\nIf the report describes multiple areas merged into one for sampling (e.g., “all areas formed into 1 stockpile after sampling”), treat this as a single domain and report the combined data.\n\nIf any value is missing, use null.\n\nOutput Format:\nReturn an array of objects, where each object is:\n\n{ \"name\": \"Stockpile 7 (SP-7)\", \"volume\": 200, \"samples_taken\": 9 }\nOnly output the array. No commentary, summary, or extra text."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.1,"position":[224,36],"id":"dafd87bc-294b-456e-976f-8a0f144faceb","name":"AI Agent"},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1","mode":"list","cachedResultName":"gpt-4.1"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[320,260],"id":"976ebebd-ab97-412a-a711-cd4d49e0cadb","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"G5B8fc5uUqqLH94p","name":"OpenAi account 3"}}},{"parameters":{"jsCode":"// Get the output string\nconst outputStr = $input.first().json.output;\n\n// Parse the JSON string into an array\nconst domains = JSON.parse(outputStr);\n\n// Now you can process each domain as an object!\nreturn domains;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[624,36],"id":"3f634aee-78cb-4901-9ba1-91d5a1f32289","name":"Code"},{"parameters":{"jsCode":"function getRequiredSamples(volume) {\n  if (volume < 75) return 3;\n  if (volume < 100) return 4;\n  if (volume < 125) return 5;\n  if (volume < 150) return 6;\n  if (volume < 175) return 7;\n  if (volume < 200) return 8;\n  // For volumes >= 200, use strict 1 per 25 m³ rule for regulatory defensibility\n  return Math.ceil(volume / 25);\n}\n\n// This assumes your input array is stored as the first item's \"output\" field, as a stringified JSON array\nconst domainArray = typeof $('AI Agent').first().json.output === 'string' ? JSON.parse($('AI Agent').first().json.output) : $('AI Agent').first().json.output;\n\nconst results = domainArray.map(domain => {\n  const volume = Number(domain.volume);\n  const samples = Number(domain.samples_taken);\n  const required = getRequiredSamples(volume);\n\n  return {\n    name: domain.name,\n    volume: volume,\n    samples_taken: samples,\n    required_samples: required,\n    status: samples >= required ? \"OK\" : \"DEFICIENT\",\n    shortfall: samples >= required ? 0 : required - samples\n  };\n});\n\nreturn results.map(r => ({ json: r }));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[848,36],"id":"32b7b445-8778-43be-aacf-23e4ce309ce2","name":"Code1"},{"parameters":{"promptType":"define","text":"=deficient_domains::{{ $json.deficient_domains.toJsonString() }}\n\nNon_deficient_domains::{{ $json.ok_domains.toJsonString() }}","options":{"systemMessage":"=You are given two lists: deficient_domains and Non_deficient_domains. Create a direct, user-friendly message that can be sent immediately without any introductory text or explanations.\nInstructions:\n\nStart with a greeting\nAlways list ALL domains found (both deficient and non-deficient)\nThen specify the status:\n\nIf deficient_domains is empty: State that all domains have sufficient samples\nIf deficient_domains has items: Clearly identify which ones are deficient with specific deficit amounts\n\n\nInclude a polite request for action (only if there are deficiencies)\nEnd with a thank you\n\nFormat the output as a ready-to-send message with no additional commentary, explanations, or meta-text around it.\nExample outputs:\nWhen there are deficiencies:\n\"Hi,\nThe following domains were found during our review:\n\nDomain A, Domain B, Domain C, Domain D\n\nAmong these, the following domains currently have sample deficits:\n\nDomain A: 2 samples short\nDomain C: 1 sample short\n\nPlease address these deficiencies as soon as possible. Thank you!\"\nWhen there are no deficiencies:\n\"Hi,\nThe following domains were found during our review:\n\nDomain A, Domain B, Domain C, Domain D\n\nAll domains have sufficient samples. Thank you!\""}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.1,"position":[1296,36],"id":"b11dbe5b-b905-4d4b-85b8-e84e980de82d","name":"AI Agent1","executeOnce":false},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1","mode":"list","cachedResultName":"gpt-4.1"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[1392,260],"id":"12bd065a-3251-4519-98fb-2c9a026ab630","name":"OpenAI Chat Model1","credentials":{"openAiApi":{"id":"G5B8fc5uUqqLH94p","name":"OpenAi account 3"}}},{"parameters":{"jsCode":"const stockpiles = $input.all().map(item => item.json);\n\nconst deficientStockpiles = stockpiles.filter(stockpile => stockpile.status === \"DEFICIENT\");\nconst okStockpiles = stockpiles.filter(stockpile => stockpile.status === \"OK\");\nconst completed = deficientStockpiles.length === 0;\n\nreturn [{\n    json: {\n        deficient_domains: deficientStockpiles,\n        ok_domains: okStockpiles,  // Add this if you want to see the OK ones too\n        completed: completed,\n        total_stockpiles: stockpiles.length,\n        deficient_count: deficientStockpiles.length,\n        ok_count: okStockpiles.length\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1072,36],"id":"28029cd0-3eff-4e96-9625-6a572180b6d3","name":"Code2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7efa078b-dd7c-44cc-8801-b77a2d93b44e","leftValue":"={{ $('Code2').item.json.completed }}","rightValue":"true","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1696,36],"id":"92cc5705-64e0-4296-95af-0b206492122d","name":"If"},{"parameters":{"assignments":{"assignments":[{"id":"98e0098d-dc5f-4261-96d4-9263903f5d8a","name":"output","value":"={{ $('AI Agent1').item.json.output }}","type":"string"},{"id":"f91532ab-8103-493a-88ef-dc8fa9e7ac83","name":"completed","value":"false","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2544,184],"id":"a69a1426-54eb-4eec-a320-6e61439b7e45","name":"Edit Fields"},{"parameters":{"assignments":{"assignments":[{"id":"2e78772a-8788-4d96-a951-89c1d370bea8","name":"output","value":"={{ $('AI Agent1').item.json.output }}","type":"string"},{"id":"2560788f-c5be-4e65-a7be-12319671e280","name":"completed","value":"true","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2008,-112],"id":"64f27903-5f0e-4242-90b5-cfce275354d6","name":"Edit Fields1"},{"parameters":{"promptType":"define","text":"={{ $json.output }}","options":{"systemMessage":"=You are a sample deficit notification assistant.\nYou will receive a basic deficit message listing domains and their sample shortfalls.\nDraft a clear and professional email to notify about sample deficiencies.\nInstructions:\n\nBegin with a polite greeting such as \"Hello,\"\nProvide brief context that this is a routine sample inventory check\nList the domains with deficits in a clear format with specific shortfall amounts\nRequest immediate action to address the deficiencies\nSpecify a reasonable timeline for resolution (e.g., \"within the next 48 hours\")\nUse a professional, concise, and helpful tone\nClose with a polite thank you and \"Best regards\"\nDo not reference AI, automation, or personal names\n\nInput:\nYou will receive a deficit message like this:\n\"The following domains currently have a deficit in their required number of samples:\n\nStockpile 2 (SP2): 1 sample short\nStockpile 6 (SP6): 1 sample short\"\n\nYour output should be an email like this:\nHello,\nFollowing our Waste report check, we have identified deficiencies in the required number of samples for the following domains:\n\nStockpile 2 (SP2): 1 sample short\nStockpile 6 (SP6): 1 sample short\n\nPlease address these sample deficiencies within the next 48 hours to ensure compliance with our sampling requirements.\nThank you for your prompt attention to this matter.\nBest regards\nUse only the deficit information provided. Do not include names, sign-offs, or any information not specified above."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.1,"position":[1920,184],"id":"11dc9f86-79f2-49b0-ad2f-169bf38aca38","name":"AI Agent2"},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1","mode":"list","cachedResultName":"gpt-4.1"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[2016,408],"id":"15db0d21-5c6f-4c6e-aa82-256f2854de2b","name":"OpenAI Chat Model2","credentials":{"openAiApi":{"id":"G5B8fc5uUqqLH94p","name":"OpenAi account 3"}}},{"parameters":{"sendTo":"shreyansh@gammastack.com","subject":"Urgent Action Required: Domain Deficit Notification","message":"={{ $json.output }}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[2320,184],"id":"06a54ed6-f64f-41ad-8ca6-e26752998fd4","name":"Send a message","webhookId":"fab9e627-6985-4ec3-a4e8-a8a7abc99d05","credentials":{"gmailOAuth2":{"id":"2GLRzkgXkIxgIJKL","name":"Gmail account"}}}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Code2","type":"main","index":0}]]},"OpenAI Chat Model1":{"ai_languageModel":[[{"node":"AI Agent1","type":"ai_languageModel","index":0}]]},"Code2":{"main":[[{"node":"AI Agent1","type":"main","index":0}]]},"If":{"main":[[{"node":"Edit Fields1","type":"main","index":0}],[{"node":"AI Agent2","type":"main","index":0}]]},"AI Agent1":{"main":[[{"node":"If","type":"main","index":0}]]},"AI Agent2":{"main":[[{"node":"Send a message","type":"main","index":0}]]},"OpenAI Chat Model2":{"ai_languageModel":[[{"node":"AI Agent2","type":"ai_languageModel","index":0}]]},"Send a message":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a4c6e67a-e2d4-456a-833d-bcef42499836","triggerCount":0,"tags":[]}