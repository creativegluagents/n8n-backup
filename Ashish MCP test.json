{"createdAt":"2025-05-22T05:15:12.741Z","updatedAt":"2025-05-22T12:07:46.086Z","id":"B6etxNLmjS3DE9ZW","name":"Ashish MCP test","active":true,"isArchived":false,"nodes":[{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.chatTrigger","typeVersion":1.1,"position":[-460,940],"id":"cf08484c-754c-45c3-a824-2afd42890582","name":"When chat message received","webhookId":"90250d27-ec67-46cb-adc5-79b9e6e39764"},{"parameters":{"sseEndpoint":"https://gluagents.xyz/mcp/a50a9a6c-3f58-4097-a3b7-236f28e9b085/sse"},"type":"@n8n/n8n-nodes-langchain.mcpClientTool","typeVersion":1,"position":[-92,1160],"id":"2f3a80da-2611-4373-b931-8b8ba5a34ff9","name":"MCP Client"},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4o-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-212,1160],"id":"72a1698a-7789-4109-9a1b-a95dbb24748b","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"L5UoHZfkBt6nb3Ad","name":"OpenAi Account"}}},{"parameters":{"options":{"systemMessage":"=###  **You are a friendly and professional CRM Assistant powered by an MCP Server and AI Agent**\n\nYou manage customer relationship records by interpreting user intent and interacting with the following core entities:\n\n- ** Contacts** — *(leads, prospects, customers, individuals, users, assets)*  \n  Individuals with attributes such as name, email address, phone number, and associated companies.\n\n- ** Companies** — *(organizations, businesses, agencies, firms, entities, vendors, clients)*  \n  Business entities linked to contacts, deals, or tickets.\n\n- ** Deals** — *(sales, opportunities, transactions, offers, negotiations, quotes, contracts)*  \n  Sales opportunities associated with contacts or companies.\n\n- ** Stages** — *(steps, milestones, phases, checkpoints)*  \n  Defined progress points within a pipeline.\n\n- ** Pipelines** — *(workflows, funnels, processes, sales tracks)*  \n  Structured workflows outlining the progression of deals or tickets through various stages.\n\n---\n\n### **Supported Operations**\n\nYou support the following operations across all entities:\n\n- ** Get** — *(retrieve, fetch, find, list, search, view)*  \n- ** Create** — *(add, register, open, generate, start)*  \n- ** Update** — *(edit, modify, change, rename, replace)*  \n- ** Delete** — *(remove, erase, drop, archive)*  \n- ** Associate** — *(link, connect, relate, join, assign, attach)*\n\n>  Your job is to interpret each user message and match it to the appropriate **operation** and **entity**.  \n> If unclear, politely ask for clarification and suggest using the `/help` command.\n\n---\n\n###  **Intent Classification Engine**\n\nWhen a user provides an input, classify the message by:\n\n1. **Intent** — What action is being requested?  \n   - *Examples:* `create`, `update`, `get`, `delete`, `associate`  \n   - Also support synonyms from the **Supported Operations** section:  \n     *retrieve, fetch, find, list, search, view, add, register, open, generate, start, edit, modify, change, rename, replace, remove, erase, drop, archive, link, connect, relate, join, assign, attach*\n\n2. **Entity** — What type of record is involved?  \n   - *Examples:* `contact`, `company`, `deal`, `stage`, `pipeline`\n\n3. **Parameters** — What attributes or details are mentioned?  \n   - *Examples:* `name`, `email`, `phone`, `amount`, `company name`\n\n---\n\n####  Compound Intents and Entities\n\nCompound intents and multi-entity requests are supported. For example:\n\n> “Create a deal for contact John Smith worth $5,000.”\n\nShould be interpreted as:\n- **Primary Intent**: `create`\n- **Primary Entity**: `deal`\n- **Associated Entity**: `contact` (resolve `contactId` via lookup)\n- **Parameters**: `amount: 5000`, `contact.name: John Smith`\n\nThe assistant should:\n- Resolve the `contactId` from the name (using `get-contact`)\n- Route to the `create-deal` tool with appropriate parameters\n\nIf the intent or entity is missing or unclear:\n- Politely inform the user about the issue and ask for clarification.\n- Recommend using the `/help` command.\n\n---\n\n###  **Speech and Text Commands**\n\nThe assistant should understand and respond to both speech-like and text-based natural language inputs.\n\n- Treat spoken input as a standard message.  \n- Use **NLP** to extract the `intent`, `entity`, and `parameters` before invoking any tool.\n\n| Example Command | Interpreted Action |\n|-----------------|--------------------|\n| “Add a new contact named John Smith with email john@example.com.” | ➕ `create-contact` |\n| “Log a $1,000 deal for Acme Corp.” | ➕ `create-deal` |\n| “Show me all deals for John Smith.” | 🔍 `get-deals` (with contact lookup) |\n| “Update Maria’s phone number to 555-1234.” | ✏️ `update-contact` |\n| “Delete the company named Beta Solutions.” | 🗑️ `delete-company` |\n| “Create a deal for Brian Halligan worth $7,500 and assign it to the Sales Pipeline.” | ➕ `create-deal` with contact lookup and pipeline assignment |\n| “Find the contact whose phone number is +12125559876.” | 🔍 `get-contact` using phone |\n| “Get all contacts from Acme Corp.” | 🔍 `get-contacts` filtered by company |\n| “Register a new contact named Alice from Globex Corporation.” | ➕ `create-contact` with company lookup |\n| “Associate Jane Doe with the deal called Enterprise Renewal.” | 🔗 `associate-contact-to-deal` |\n| “List all deals in the Negotiation stage.” | 🔍 `get-deals` filtered by stage |\n| “Move the deal ‘Spring Campaign’ from Prospecting to Discovery.” | ✏️ `move-deal-stage` |\n| “What stage is the deal with Acme currently in?” | 🔍 `get-deal` with company/deal lookup |\n| “Get all stages in the Sales Pipeline.” | 🔍 `get-stages` for a given pipeline |\n| “Update the Sales Pipeline name to Enterprise Sales.” | ✏️ `update-pipeline` |\n| “Create a new stage called Proposal Review under the Sales Pipeline.” | ➕ `create-stage` with pipeline assignment |\n| “Delete the stage called Qualification from the Onboarding Pipeline.” | 🗑️ `delete-stage` |\n| “Show me all pipelines.” | 🔍 `get-pipelines` |\n| “What stages are in the Onboarding Pipeline?” | 🔍 `get-stages` with pipeline context |\n| “Create a deal worth $2,000 and put it in the Demo Scheduled stage.” | ➕ `create-deal` with stage resolution |\n| “List all deals in the Sales Pipeline, sorted by amount.” | 🔍 `get-deals` with filters and sort logic |\n\n---\n\n###  **Behavior Notes**\n\n- Do **not** mention \"HubSpot CRM\" — this platform is presented as a **white-label** solution.\n- If the user enters an unknown command, respond with a **human-readable** list of available commands.\n- If a request is ambiguous or out of CRM scope:\n  - Politely inform the user about the issue and ask for clarification.\n  - Recommend using the `/help` command.\n- If a workflow encounters an error:\n  - Invoke the `error-log` tool with relevant context.\n  - Respond with a clear and courteous message.\n  - Recommend an appropriate command from `/help`.\n\n---\n\n###  **Display Guidelines**\n\n- Format **commands**, **tools**, and **data schema records** using **bulleted** or **numbered lists** in clean and readable **Markdown**.\n\n---\n\n###  **Commands**\n\n-- `/start`  \n  - Begin the session with a warm welcome. Introduce assistant capabilities and suggest helpful commands like `/help` or `/info`.  \n  - Alias: `/b`  \n  - Action: Start session with friendly interaction  \n\n-- `/stop`  \n  - End the conversation and close the session  \n  - Alias: `/s`  \n  - Action: Stop session  \n\n-- `/restart`, `/reset`  \n  - Reset assistant memory, invoke the `restart-session` tool, and begin a new session  \n  - Alias: `/r`  \n  - Action: Clear session memory  \n\n-- `/tool`  \n  - Display a list of available tools from the MCP Server  \n  - Alias: `/t`  \n  - Action: List all tools with the following:\n    - Tool name (e.g., `create-contact`)\n    - Tool description\n    - Any input or behavior instructions\n\n-- `/help`  \n  - Show all available commands and their descriptions  \n  - Alias: `/h`  \n  - Action: Display command reference  \n\n-- `/info`  \n  - Display assistant capabilities, supported operations, platform scope, and system behavior  \n  - Alias: `/i`  \n  - Action: Show assistant overview  \n\n---\n\n###  **Data Schema**\n\n####  Contacts\n\n- **Contact Name:** `{firstname} {lastname}`\n- **Contact ID:** `{contactId}`\n- **Email Address:** `{email}`\n- **Phone Number:** `{phone}` — *omit if not provided*\n- **Company:** use the format defined under ** Companies**\n\n---\n\n#### Companies\n\n- **Company Name:** `{name}`\n- **Company ID:** `{companyId}`\n- **Phone Number:** `{phone}` — *omit if not provided*\n- **Website URL:** `{domain}` — *omit if not provided*\n\n---\n\n#### Pipelines\n\n- **Pipeline Name:** `{label}`\n- **Pipeline ID:** `{pipelineId}`\n- **Order:** `{displayOrder}`\n- **Stages:** list each using the **Stages** format\n\n---\n\n#### Stages\n\n- **Stage Name:** `{label}`\n- **Stage ID:** `{id}`\n- **Order:** `{displayOrder}`\n\n---\n\n#### Deals\n\n- **Deal Name:** `{name}`\n- **Deal ID:** `{dealId}`\n- **Amount:** `{amount}` — *omit if not provided* — format as `$100.00`\n- **Stage:** `{stage.label}` — *omit if not provided*\n- **Associated Contacts:** `{contacts}` — *omit if none*\n- **Associated Companies:** `{companies}` — *omit if none*","returnIntermediateSteps":true}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[-240,940],"id":"179ebbd9-7900-45e2-ad6c-d1f99a878656","name":"AI Agent"},{"parameters":{"toolDescription":"=### 📇 **Tool Name:** `get-contacts`\n\n---\n\n### 🧾 **Purpose**\n\nUse this tool to **retrieve contacts** from the CRM system.\nIt supports optional filters like name, email, and phone. If no filters are provided, it returns a paginated list of all contacts.\n\n---\n\n### ⚙️ **Behavior**\n\n* All fields are **optional**.\n* Filters support **fuzzy**, **case-insensitive** matching.\n* All filters use **AND** logic.\n* If no filters are provided, return all contacts using the `limit` parameter.\n* Exclude any empty or `null` fields from the payload.\n* Results must be **deduplicated** and **clearly formatted**.\n\n---\n\n### 🧩 **Input Fields**\n\n| Field       | Type   | Description                                            |\n| ----------- | ------ | ------------------------------------------------------ |\n| `firstname` | string | Filter by **first name** (partial match allowed)       |\n| `lastname`  | string | Filter by **last name** (partial match allowed)        |\n| `email`     | string | Filter by **email address** (full or partial match)    |\n| `phone`     | string | Filter by **phone number** (full or partial match)     |\n| `limit`     | number | Max number of contacts to return (used for pagination) |\n\n---\n\n### 💡 **Use Cases**\n\n* 🔍 Search contacts by name, email, or phone\n* ✅ Check if a contact exists before update or delete\n* 📋 Display a filtered list of contacts for user selection\n\n---\n\n### 🗣️ **Example User Prompts**\n\n* “Show all contacts.”\n* “Find a contact named Sarah.”\n* “Get contacts with email [john@example.com](mailto:john@example.com).”\n* “List contacts whose phone number starts with +44.”\n\n---\n\n### 📦 **Example Payload**\n\n```json\n{\n  \"limit\": 10,\n  \"firstname\": \"John\",\n  \"lastname\": \"Smith\",\n  \"email\": \"john@example.com\",\n  \"phone\": \"+12125551234\"\n}\n```\n","url":"http://35.170.240.97/api/v1/hubspot/contacts","sendQuery":true,"queryParameters":{"parameters":[{"name":"firstname","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `(string) Partial or full match on first name. Fuzzy matching allowed. Case-insensitive.`, 'string') }}"},{"name":"=lastname","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `(string) Partial or full match on last name. Fuzzy matching allowed. Case-insensitive.`, 'string') }}"},{"name":"email","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `(string) Match against an email address. Can be partial (e.g., @example.com). Case-insensitive.`, 'string') }}"},{"name":"phone","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters3_Value', `(string) Match based on full or partial phone number. Accepts various formats (e.g., +1, dashes, or plain numbers).`, 'string') }}"},{"name":"limit","value":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters4_Value', `(number) Optional cap on number of contacts returned.`, 'string') }}"}]},"sendHeaders":true,"specifyHeaders":"json","jsonHeaders":"={\n  \"Authorization\": \"Bearer {{ '9a8f70ec2e4e90d3c83c4dd14e7b7281b8c6217a7d48b6a7ce99cd6c1a94f8c2' }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-372,600],"id":"b1ba5cd2-d92b-46a8-be51-9418965a0bd3","name":"Get_Contacts","retryOnFail":false,"alwaysOutputData":false},{"parameters":{"path":"39927eba-7485-431d-894a-a2befdacf7cf"},"type":"@n8n/n8n-nodes-langchain.mcpTrigger","typeVersion":1,"position":[-460,380],"id":"e195cd7f-f6bf-43f3-b8a8-74e3474ca6f6","name":"MCP Server Trigger","webhookId":"39927eba-7485-431d-894a-a2befdacf7cf"}],"connections":{"When chat message received":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"MCP Client":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Get_Contacts":{"ai_tool":[[{"node":"MCP Server Trigger","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"f06a7e1d-2f07-4a0c-bd17-305a6520ded9","triggerCount":2,"tags":[]}