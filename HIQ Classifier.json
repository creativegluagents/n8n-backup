{"createdAt":"2025-07-30T06:12:00.195Z","updatedAt":"2025-08-14T10:20:47.469Z","id":"kCChtEurzPCgPyET","name":"HIQ Classifier","active":true,"isArchived":false,"nodes":[{"parameters":{"respondWith":"json","responseBody":"={{ $json }}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[960,640],"id":"9dff3fbe-4122-4645-8c8e-16d76cc4099e","name":"Respond to Webhook1"},{"parameters":{"httpMethod":"POST","path":"23145b04-8328-41c1-b417-ef201e806dd7","responseMode":"responseNode","options":{"binaryPropertyName":"data"}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-2080,544],"id":"209bf1b1-74cd-4f6c-959e-7f5eeb89503b","name":"Webhook","webhookId":"23145b04-8328-41c1-b417-ef201e806dd7"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[-960,640],"id":"75d1c692-1042-490a-853d-afa6c82baad6","name":"Aggregate1","alwaysOutputData":true,"onError":"continueRegularOutput"},{"parameters":{"workflowId":{"__rl":true,"value":"m09qUo4o1a7QMG1C","mode":"list","cachedResultName":"5. EPA Rule Book"},"workflowInputs":{"mappingMode":"defineBelow","value":{"report":"={{ $('Extract from File1').item.json.text }}","domains":"={{ $('Document Checker').item.json.domains }}"},"matchingColumns":["report"],"schema":[{"id":"report","displayName":"report","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"domains","displayName":"domains","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-512,640],"id":"d05705e9-6469-4ff0-a4ba-33c7e7d29075","name":"EPA rule book"},{"parameters":{"operation":"pdf","binaryPropertyName":"data0","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-1856,640],"id":"dd929a40-eb0e-4ac1-a6cc-50ea7199f860","name":"Extract from File1"},{"parameters":{"workflowId":{"__rl":true,"value":"YSGCDKWlU7ZSKMaF","mode":"list","cachedResultName":"Document checker"},"workflowInputs":{"mappingMode":"defineBelow","value":{"text":"={{ $('Extract from File1').item.json.text }}"},"matchingColumns":["text"],"schema":[{"id":"text","displayName":"text","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"chatId","displayName":"chatId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-1632,640],"id":"e75b17f9-4b81-41ad-9bcd-d23e91e959d7","name":"Document Checker"},{"parameters":{"workflowId":{"__rl":true,"value":"E6CfMaZ66qZvypvI","mode":"list","cachedResultName":"2. Sample adequacy checker"},"workflowInputs":{"mappingMode":"defineBelow","value":{"text":"={{ $('Extract from File1').item.json.text }}","domains":"={{ $('Document Checker').item.json.domains }}"},"matchingColumns":["text"],"schema":[{"id":"text","displayName":"text","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"domains","displayName":"domains","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-1408,640],"id":"19b18a57-5b06-44c5-a363-c3b2403e05ca","name":"Sample Adequacy"},{"parameters":{"workflowId":{"__rl":true,"value":"JgvyMhUYZKtkeTBh","mode":"list","cachedResultName":"3. Waste organizer"},"workflowInputs":{"mappingMode":"defineBelow","value":{"text":"={{ $('Extract from File1').item.json.text }}","domains":"={{ $('Document Checker').item.json.domains }}"},"matchingColumns":["text"],"schema":[{"id":"text","displayName":"text","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"domains","displayName":"domains","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-1184,640],"id":"54cff464-5f6c-44a6-8a00-1946437d64f0","name":"Waste Organiser"},{"parameters":{"workflowId":{"__rl":true,"value":"tqrgduXe2fkW7UrJ","mode":"list","cachedResultName":"4. Danger Detector"},"workflowInputs":{"mappingMode":"defineBelow","value":{"report":"={{ $('Extract from File1').item.json.text }}","list":"={{ $json.data }}"},"matchingColumns":["text","toJsonString"],"schema":[{"id":"list","displayName":"list","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"report","displayName":"report","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-736,640],"name":"Danger Detector","id":"a7fe15dd-9d9b-4fa8-b740-aa84b2cdeb8e"},{"parameters":{"workflowId":{"__rl":true,"value":"R8n4cQb3n42mwWTf","mode":"list","cachedResultName":"6. The Recycling Hunter"},"workflowInputs":{"mappingMode":"defineBelow","value":{"report":"={{ $('Extract from File1').item.json.text }}","domains":"={{ $('Document Checker').item.json.domains }}"},"matchingColumns":["report"],"schema":[{"id":"report","displayName":"report","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"domains","displayName":"domains","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-288,640],"id":"83f61487-9b20-4d98-a08e-577406660204","name":"Recycling Hunter"},{"parameters":{"jsCode":"const map = [\n  { key: 'Document Checker' },\n  { key: 'Sample Adequacy' },\n  { key: 'Waste Organiser' },\n  { key: 'Danger Detector' },\n  { key: 'EPA rule book' },\n  { key: 'Recycling Hunter' },\n];\n\n// --- helpers ---\nconst coerceBool = v =>\n  typeof v === 'boolean' ? v :\n  typeof v === 'string' ? (v.trim().toLowerCase() === 'true' ? true : v.trim().toLowerCase() === 'false' ? false : undefined) :\n  typeof v === 'number' ? (v === 1 ? true : v === 0 ? false : undefined) :\n  undefined;\n\nconst looksJson = s => typeof s === 'string' && ((s = s.trim()).startsWith('{') && s.endsWith('}')) || (s.startsWith('[') && s.endsWith(']'));\n\nfunction findPassed(v) {\n  if (v == null) return;\n  if (Array.isArray(v)) { for (const x of v) { const r = findPassed(x); if (typeof r === 'boolean') return r; } return; }\n  if (typeof v === 'object') {\n    if (Object.prototype.hasOwnProperty.call(v, 'passed')) {\n      const b = coerceBool(v.passed); if (typeof b === 'boolean') return b;\n    }\n    for (const k of Object.keys(v)) { const r = findPassed(v[k]); if (typeof r === 'boolean') return r; }\n  }\n}\n\nfunction normalize(input) {\n  const parseDeep = v => {\n    if (typeof v === 'string' && looksJson(v)) { try { v = JSON.parse(v); } catch {} }\n    if (Array.isArray(v)) return v.map(parseDeep);\n    if (v && typeof v === 'object') { const o = {}; for (const k of Object.keys(v)) o[k] = parseDeep(v[k]); return o; }\n    return v;\n  };\n\n  const stripAndUnwrap = v => {\n  if (Array.isArray(v)) return v.map(stripAndUnwrap);\n  if (v && typeof v === 'object') {\n    while (v && typeof v === 'object' && !Array.isArray(v)) {\n      const ks = Object.keys(v);\n      if (ks.length === 1 && (ks[0] === 'output' || ks[0] === 'data')) v = v[ks[0]];\n      else break;\n    }\n    if (Array.isArray(v)) return v.map(stripAndUnwrap);\n    if (v && typeof v === 'object') {\n      const o = {};\n      for (const k of Object.keys(v)) {\n        if (k !== 'passed' && k !== 'domains') {  // ⬅ remove 'domains'\n          o[k] = stripAndUnwrap(v[k]);\n        }\n      }\n      return o;\n    }\n  }\n  return v;\n};\n\n\n  let cur = input, prev;\n  for (let i = 0; i < 4; i++) {\n    prev = JSON.stringify(cur);\n    cur = stripAndUnwrap(parseDeep(cur));\n    if (JSON.stringify(cur) === prev) break;\n  }\n  if (typeof cur === 'string' && looksJson(cur)) { try { cur = JSON.parse(cur); } catch {} cur = stripAndUnwrap(cur); }\n  return cur;\n}\n\nfunction collect(nodeName) {\n  try {\n    const items = $items(nodeName, 0, 0) || [];\n    if (!items.length) return { passed: false, output: { note: 'no output' } };\n    const raw = items.length === 1 ? items[0].json : items.map(i => i.json);\n    const passed = findPassed(raw);\n    return { passed: typeof passed === 'boolean' ? passed : false, output: normalize(raw) };\n  } catch {\n    return { passed: false, output: { error: `No data from node \"${nodeName}\"` } };\n  }\n}\n\n// --- run ---\nconst result = {};\nlet passCount = 0;\nfor (const { key } of map) {\n  const r = collect(key);\n  if (r.passed) passCount++;\n  result[key] = r; // key is node name now\n}\nresult.summary = {\n  total_nodes: map.length,\n  passed_count: passCount,\n  failed_count: map.length - passCount,\n  all_passed: passCount === map.length,\n};\n\nreturn [{ json: result }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-64,640],"id":"f12692fa-e8b2-415d-a2e2-7efc00a0e7de","name":"Code"},{"parameters":{"content":"Extracting the report","height":240,"width":192},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1904,560],"id":"42346cbc-dfa5-483d-984c-71872d40101f","name":"Sticky Note"},{"parameters":{"content":"Agents","height":240,"width":1616,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1832,560],"id":"491be04d-ce1f-4767-b81b-46bd0c4d0392","name":"Sticky Note1"},{"parameters":{"content":"Formatting the responses","height":240,"width":192,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-336,560],"id":"a9b38e3c-1881-4d5c-bd6a-c6af53946a65","name":"Sticky Note2"},{"parameters":{"content":"Responding","height":240,"width":288,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[640,560],"id":"3a33cfac-9997-45d3-9961-c4436ba9fc52","name":"Sticky Note3"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-2080,736],"id":"016c4c20-c08e-41bc-9740-0f46d58c869d","name":"When clicking ‘Execute workflow’"},{"parameters":{"promptType":"define","text":"={{ $json }}","options":{"systemMessage":"=Task:\nYou will be given JSON input containing multiple agent results, each with a name as the key and an object as the value.\nYour job is to transform it into a new JSON where:\n\nThe keys remain exactly the same as the original (e.g., \"Document Checker\", \"Sample Adequacy\", etc.).\n\nThe values are user-friendly but fully detailed summaries that retain all information from the original agent’s output and passed fields.\n\nThe final JSON must be valid and follow the same key order as the input.\n\nTransformation Rules:\n\nIf \"passed\": true, include \"Status: Passed ✅\" at the start of the text. If false, \"Status: Failed ❌\" Give a line space after this.\n\nConvert all structured fields into readable sentences or bullet points, but do not remove any data.\n\nKeep all numbers, dates, names, reasons, thresholds, and technical terms.\n\nFor list-based outputs (e.g., domains, stockpiles), list each item with its name and details.\n\nCombine \"output\" and \"passed\" into one cohesive explanation for each agent.\n\nThe summary key should give a plain-language wrap-up, including total agents, passed count, failed count, and overall concerns.\n\nOutput must be valid JSON with no extra commentary outside JSON.\n\nExample Output Style:\n\n{\n  \"Document Checker\": \"Status: Passed ✅ \nThe report date is 2025-03-20 (valid). Mandatory sections found: Chain of Custody (Appendix B), Certificate of Analysis (Appendix E), Site History (1.1 Background & 1 Introduction). Consultant: D&N Geotechnical Pty Ltd. All dates: 2025-03-20, 2025-03-06, 2025-03-11.\",\n  \"Sample Adequacy\": \"Status: Failed ❌ \nThree domains have insufficient samples: SP01 (1/3, 2 short), SP02 (1/3, 2 short), SP03 (1/3, 2 short). Action required: Collect additional samples.\",\n  \"summary\": \"6 agents total, 5 passed, 1 failed. Key issue: sampling adequacy.\"\n}\nImportant:\nNo information can be skipped.\nAll text values must be a single JSON string per key.\nPreserve order of keys exactly as input."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[160,640],"id":"04610c01-f277-44c5-a516-fdd02881b7c2","name":"AI Agent"},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1","mode":"list","cachedResultName":"gpt-4.1"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[232,864],"id":"b037b6a1-f650-4891-b9c0-b0f196653255","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"G5B8fc5uUqqLH94p","name":"OpenAi account 3"}}},{"parameters":{"jsCode":"// Get the output string from AI agent\nconst outputStr = $input.first().json.output;\n\n// Remove markdown code block if present\nconst cleanedStr = outputStr\n  .replace(/```(?:json)?\\s*/gi, '') // Remove ```json or ``` (case-insensitive)\n  .replace(/```/g, '')              // Remove closing ```\n  .trim();\n\n// Parse the cleaned JSON string\nconst domains = JSON.parse(cleanedStr);\n\n// Now you can process each domain as an object!\nreturn domains;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[512,640],"id":"eaf0cfa9-8641-4738-acfe-6c794dcb6431","name":"Code3"},{"parameters":{"jsCode":"return [\n  {\n    json: {\n      jsons: $('Code').first().json,\n      plain_texts: $input.first().json\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[736,640],"id":"d90c14b6-b5bc-4eef-98c5-09ea3be670ef","name":"Code1"}],"connections":{"Aggregate1":{"main":[[{"node":"Danger Detector","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"Extract from File1","type":"main","index":0}]]},"EPA rule book":{"main":[[{"node":"Recycling Hunter","type":"main","index":0}]]},"Extract from File1":{"main":[[{"node":"Document Checker","type":"main","index":0}]]},"Document Checker":{"main":[[{"node":"Sample Adequacy","type":"main","index":0}]]},"Sample Adequacy":{"main":[[{"node":"Waste Organiser","type":"main","index":0}]]},"Waste Organiser":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]},"Danger Detector":{"main":[[{"node":"EPA rule book","type":"main","index":0}]]},"Recycling Hunter":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Extract from File1","type":"main","index":0}]]},"AI Agent":{"main":[[{"node":"Code3","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Code3":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Respond to Webhook1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"76a66069-c9cd-469b-8541-4e362b64e863","triggerCount":1,"tags":[]}